/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarea3;

import static org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_imgproc.*;
import static org.bytedeco.javacpp.opencv_imgcodecs.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileNameExtensionFilter;
import MyUtils.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.Enumeration;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.Java2DFrameConverter;
import org.bytedeco.javacv.OpenCVFrameConverter;
import org.bytedeco.javacv.OpenCVFrameConverter.ToIplImage;

/**
 *
 * @author Rafael Vasquez
 * @author Raquel Escalante
 */
public class MainInterface extends javax.swing.JFrame {
    // Creating filter controller class
    private final FiltersController myFilters;
    // Creating a JLabel to display image.
    private final JLabel imglabel;
    // Creating more jLabels for histograms
    private final JLabel rLabel;
    private final JLabel grLabel;
    private final JLabel bLabel;
    // Creating a file chooser to open files with
    private final JFileChooser fcOpen;
    // Creating a file chooser to save files with
    private final JFileChooser fcSave;
    // Properties of the Image
    private int format;
    private int width;
    private int height;
    private BufferedImage img = null;
    private IplImage ilpImage = null;
    // Hashmap and counter used to count unique colors
    private final HashMap<Integer, Integer> uniqueCols;
    private int colorsCounter;
    private final JSlider thresholdSlider;
    private final JSlider kernelSizeSlider;
    private final JSlider brightnessSlider;
    //Integer to show bits per pixel
    private int bitspp;
    //Histogram bins
    private int [] GrayBins;
    private int [] RedBins;
    private int [] GreenBins;
    private int [] BlueBins;
    
    
    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
        myFilters = new FiltersController();
        imglabel = new JLabel();
				//Labels for histograms;
        rLabel = new JLabel();
        grLabel = new JLabel();
        bLabel = new JLabel();
				bitspp = 0;
        fcOpen = new JFileChooser();
        fcSave = new JFileChooser();
        // Creating file filters for the file choosers
        FileNameExtensionFilter imagesFilter = new FileNameExtensionFilter("Imágenes: *.bmp, *.jpg, *.png, *.pbm, *.pgm, *.ppm", "bmp", "jpg", "png", "pbm", "pgm", "ppm");
        FileNameExtensionFilter savingFilter = new FileNameExtensionFilter("Imágenes RLE: *.rle", "rle");
        fcOpen.addChoosableFileFilter(imagesFilter);
        fcOpen.addChoosableFileFilter(savingFilter);
        fcOpen.setFileFilter(imagesFilter);
        
//        fcSave.addChoosableFileFilter(savingFilter);
//        fcSave.setFileFilter(savingFilter);
        
        uniqueCols = new HashMap<>();
        colorsCounter = 0;
        // Configuring some Slider's properties.
        thresholdSlider = new JSlider(0, 255, 127); // min, max, init
        thresholdSlider.setMajorTickSpacing(50);
        thresholdSlider.setPaintTicks(true);
        thresholdSlider.setPaintLabels(true);
        
        // Configuring some Slider's properties.
        kernelSizeSlider = new JSlider(2, 7, 5); // min, max, init
        kernelSizeSlider.setMajorTickSpacing(1);
        kernelSizeSlider.setPaintTicks(true);
        kernelSizeSlider.setPaintLabels(true);
        
        // Configuring some Slider's properties.
        brightnessSlider = new JSlider(-127, 127, 0); // min, max, init
        brightnessSlider.setMajorTickSpacing(50);
        brightnessSlider.setPaintTicks(true);
        brightnessSlider.setPaintLabels(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollPanePanel = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        ImageInfoPanel = new javax.swing.JPanel();
        InfoPanel = new javax.swing.JPanel();
        InfoLabel = new javax.swing.JLabel();
        Dimensiones = new javax.swing.JLabel();
        BPP = new javax.swing.JLabel();
        Colores = new javax.swing.JLabel();
        DPI = new javax.swing.JLabel();
        HistoPanel = new javax.swing.JPanel();
        HistoLabel = new javax.swing.JLabel();
        RedHistogram = new javax.swing.JPanel();
        GreenHistogram = new javax.swing.JPanel();
        BlueHistogram = new javax.swing.JPanel();
        RojoLabel = new javax.swing.JLabel();
        VerdeLabel = new javax.swing.JLabel();
        AzulLabel = new javax.swing.JLabel();
        BarraEstadoPanel = new javax.swing.JPanel();
        Estado = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        RehacerOperacion = new javax.swing.JMenu();
        AbrirArchivo = new javax.swing.JMenuItem();
        GuardarImagen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        DeshacerOperacion = new javax.swing.JMenuItem();
        Rehacer = new javax.swing.JMenuItem();
        MenuFiltros = new javax.swing.JMenu();
        ColorMenu = new javax.swing.JMenu();
        EscalaDeGrises = new javax.swing.JMenuItem();
        BlancoNegro = new javax.swing.JMenuItem();
        ReduccionColorMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        UmbralizacionMenu = new javax.swing.JMenu();
        OTSUOpenCV = new javax.swing.JMenuItem();
        OTSUPropio = new javax.swing.JMenuItem();
        Triangulo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        MorfologiaMenu = new javax.swing.JMenu();
        Erosion = new javax.swing.JMenuItem();
        Dilatacion = new javax.swing.JMenuItem();
        Apertura = new javax.swing.JMenuItem();
        Cierre = new javax.swing.JMenuItem();
        MenuAyuda = new javax.swing.JMenu();
        Readme = new javax.swing.JMenuItem();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor de Imagenes | by Raquel Escalante & Rafael Vasquez");

        InfoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        InfoLabel.setText("Información de la imagen");

        Dimensiones.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Dimensiones.setText("Dimensiones: ");

        BPP.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        BPP.setText("Bits por pixel:");

        Colores.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Colores.setText("Colores únicos:");

        DPI.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        DPI.setText("Puntos por pulgada (dpi):");

        javax.swing.GroupLayout InfoPanelLayout = new javax.swing.GroupLayout(InfoPanel);
        InfoPanel.setLayout(InfoPanelLayout);
        InfoPanelLayout.setHorizontalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InfoPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BPP)
                            .addComponent(Dimensiones)
                            .addComponent(Colores)
                            .addComponent(DPI)))
                    .addComponent(InfoLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InfoPanelLayout.setVerticalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Dimensiones)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BPP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Colores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DPI)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        HistoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        HistoLabel.setText("Histogramas");

        RedHistogram.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        RedHistogram.setLayout(new java.awt.BorderLayout());

        GreenHistogram.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        GreenHistogram.setLayout(new java.awt.BorderLayout());

        BlueHistogram.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        BlueHistogram.setLayout(new java.awt.BorderLayout());

        RojoLabel.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        RojoLabel.setText("-");

        VerdeLabel.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        VerdeLabel.setText("-");
        VerdeLabel.setToolTipText("");

        AzulLabel.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        AzulLabel.setText("-");

        javax.swing.GroupLayout HistoPanelLayout = new javax.swing.GroupLayout(HistoPanel);
        HistoPanel.setLayout(HistoPanelLayout);
        HistoPanelLayout.setHorizontalGroup(
            HistoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HistoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HistoLabel)
                    .addComponent(RojoLabel)
                    .addComponent(AzulLabel)
                    .addComponent(RedHistogram, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VerdeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GreenHistogram, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BlueHistogram, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HistoPanelLayout.setVerticalGroup(
            HistoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HistoLabel)
                .addGap(18, 18, 18)
                .addComponent(RedHistogram, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RojoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GreenHistogram, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VerdeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlueHistogram, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AzulLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ImageInfoPanelLayout = new javax.swing.GroupLayout(ImageInfoPanel);
        ImageInfoPanel.setLayout(ImageInfoPanelLayout);
        ImageInfoPanelLayout.setHorizontalGroup(
            ImageInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ImageInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ImageInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HistoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ImageInfoPanelLayout.setVerticalGroup(
            ImageInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ImageInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HistoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ScrollPanePanelLayout = new javax.swing.GroupLayout(ScrollPanePanel);
        ScrollPanePanel.setLayout(ScrollPanePanelLayout);
        ScrollPanePanelLayout.setHorizontalGroup(
            ScrollPanePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ScrollPanePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImageInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ScrollPanePanelLayout.setVerticalGroup(
            ScrollPanePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane)
            .addComponent(ImageInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        BarraEstadoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Estado.setText("Bienvenido");

        javax.swing.GroupLayout BarraEstadoPanelLayout = new javax.swing.GroupLayout(BarraEstadoPanel);
        BarraEstadoPanel.setLayout(BarraEstadoPanelLayout);
        BarraEstadoPanelLayout.setHorizontalGroup(
            BarraEstadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BarraEstadoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Estado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BarraEstadoPanelLayout.setVerticalGroup(
            BarraEstadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BarraEstadoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Estado)
                .addContainerGap())
        );

        RehacerOperacion.setText("Archivo");

        AbrirArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        AbrirArchivo.setText("Abrir Imagen...");
        AbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirArchivoActionPerformed(evt);
            }
        });
        RehacerOperacion.add(AbrirArchivo);

        GuardarImagen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        GuardarImagen.setText("Guardar imagen...");
        GuardarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarImagenActionPerformed(evt);
            }
        });
        RehacerOperacion.add(GuardarImagen);
        RehacerOperacion.add(jSeparator1);

        DeshacerOperacion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        DeshacerOperacion.setText("Deshacer");
        RehacerOperacion.add(DeshacerOperacion);

        Rehacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        Rehacer.setText("Rehacer");
        RehacerOperacion.add(Rehacer);

        MenuBar.add(RehacerOperacion);

        MenuFiltros.setText("Filtros");

        ColorMenu.setText("Color");

        EscalaDeGrises.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        EscalaDeGrises.setText("Escala de Grises");
        EscalaDeGrises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EscalaDeGrisesActionPerformed(evt);
            }
        });
        ColorMenu.add(EscalaDeGrises);

        BlancoNegro.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        BlancoNegro.setText("Blanco y Negro");
        BlancoNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlancoNegroActionPerformed(evt);
            }
        });
        ColorMenu.add(BlancoNegro);

        ReduccionColorMenu.setText("Reducción de Color");

        jMenuItem1.setText("Metodo1");
        ReduccionColorMenu.add(jMenuItem1);

        jMenuItem2.setText("Metodo2");
        ReduccionColorMenu.add(jMenuItem2);

        ColorMenu.add(ReduccionColorMenu);

        MenuFiltros.add(ColorMenu);
        MenuFiltros.add(jSeparator2);

        UmbralizacionMenu.setText("Umbralización");

        OTSUOpenCV.setText("OTSU (OpenCV)");
        OTSUOpenCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OTSUOpenCVActionPerformed(evt);
            }
        });
        UmbralizacionMenu.add(OTSUOpenCV);

        OTSUPropio.setText("OTSU (Propio)");
        OTSUPropio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OTSUPropioActionPerformed(evt);
            }
        });
        UmbralizacionMenu.add(OTSUPropio);

        Triangulo.setText("Triangulo");
        Triangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrianguloActionPerformed(evt);
            }
        });
        UmbralizacionMenu.add(Triangulo);

        MenuFiltros.add(UmbralizacionMenu);
        MenuFiltros.add(jSeparator3);

        MorfologiaMenu.setText("Morfología");

        Erosion.setText("Erosión");
        MorfologiaMenu.add(Erosion);

        Dilatacion.setText("Dilatación");
        Dilatacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DilatacionActionPerformed(evt);
            }
        });
        MorfologiaMenu.add(Dilatacion);

        Apertura.setText("Apertura");
        MorfologiaMenu.add(Apertura);

        Cierre.setText("Cierre");
        MorfologiaMenu.add(Cierre);

        MenuFiltros.add(MorfologiaMenu);

        MenuBar.add(MenuFiltros);

        MenuAyuda.setText("Ayuda");

        Readme.setText("Léeme");
        Readme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadmeActionPerformed(evt);
            }
        });
        MenuAyuda.add(Readme);

        About.setText("Acerca De...");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        MenuAyuda.add(About);

        MenuBar.add(MenuAyuda);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPanePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BarraEstadoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPanePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BarraEstadoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private IplImage toIplImage(BufferedImage bufImage) {
        ToIplImage iplConverter = new OpenCVFrameConverter.ToIplImage();
        Java2DFrameConverter java2dConverter = new Java2DFrameConverter();
        IplImage iplImage = iplConverter.convert(java2dConverter.convert(bufImage));
        return iplImage;
    }
    
    private  BufferedImage toBufferedImage(IplImage src) {
        OpenCVFrameConverter.ToIplImage grabberConverter = new OpenCVFrameConverter.ToIplImage();
        Java2DFrameConverter paintConverter = new Java2DFrameConverter();
        Frame frame = grabberConverter.convert(src);
        return paintConverter.getBufferedImage(frame,1);
    }
    
    private int OTSUThreshold(int[] histogram, int total){
        int threshold = 0;
        double sum = 0;
        double sumB = 0;
        double maxVariance = 0;
        int weightB = 0;
        int weightF = 0;

        for (int t = 0 ; t < 256 ; t++){
            sum += t * histogram[t];
        }

        for (int t = 0 ; t < 256 ; t++){
            weightB += histogram[t];               // Weight Background
            if (weightB == 0) continue;

            weightF = total - weightB;             // Weight Foreground
            if (weightF == 0) break;

            sumB += (float) (t * histogram[t]);

            double mB = sumB / weightB;            // Mean Background
            double mF = (sum - sumB) / weightF;    // Mean Foreground

            // Calculate Between Class Variance
            double varBetween = (double)weightB * (double)weightF * (mB - mF) * (mB - mF);

            // Check if new maximum found
            if (varBetween > maxVariance) {
               maxVariance = varBetween;
               threshold = t;
            }
        }
        return threshold;
    }
    
    private static BufferedImage duplicateImage(BufferedImage image) {
        ColorModel cm = image.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = image.copyData(null);
        BufferedImage copyImage = new BufferedImage(cm, raster, isAlphaPremultiplied, null);
        return copyImage;
    }
    
    private void countUniqueColors(){
        colorsCounter = 0;
        uniqueCols.clear();
        int key;
        if (img != null){
            for(int y = 0; y < height; y++){
                for(int x = 0; x < width; x++){
                    // Unpacking the color data of each pixel.
                    key = img.getRGB(x,y);
                    
                    // If the color has not been counted.
                    if (uniqueCols.get(key) == null){
                        uniqueCols.put(key, 1);
                        colorsCounter++;
                    } 
                }
            }
        }
    }
    
    private void updateDimensions(){
        if (img != null){
            width = img.getWidth();
            height = img.getHeight();
        } 
    }
		
    private void getBitsPerPixel(){
        if (img != null){
            ColorModel cm = img.getColorModel();
            bitspp = cm.getPixelSize();         
        }
    }
    
    private void drawHistograms(){
        //Getting dimensions from panels
        Dimension RPanelDim = RedHistogram.getSize();
        int RPanelDimW = RPanelDim.width;
        int RPanelDimH = RPanelDim.height;
        Dimension GrPanelDim = GreenHistogram.getSize();
        int GrPanelDimW = GrPanelDim.width;
        int GrPanelDimH = GrPanelDim.height;
        Dimension BPanelDim = BlueHistogram.getSize();
        int BPanelDimW = BPanelDim.width;
        int BPanelDimH = BPanelDim.height;

        //Creating the general histogram matrix
        Histogram GenHist = new Histogram();
        
        if (bitspp < 24) //If Image is grayscaled or b&w (< 24 bits per pixel), just show a luminosity histogram
        {
            //Operations over histograms
            GenHist.setBins(img, "GRAY");
            GenHist.normalizeHistograms("GRAY");
            GrayBins = GenHist.getGrayHistogram();

            //Graphics creation
            BufferedImage Ghist_base = new BufferedImage(RPanelDimW, RPanelDimH, BufferedImage.TYPE_3BYTE_BGR);
            RojoLabel.setText("Luminosidad");
            grLabel.setIcon(null);
            bLabel.setIcon(null);
            VerdeLabel.setText("-");
            AzulLabel.setText("-");

            //Drawing the graphics
            Graphics2D Ghist_graph = Ghist_base.createGraphics();
            Ghist_graph.setBackground(Color.WHITE);
            Ghist_graph.fillRect(0, 0, RPanelDimW, RPanelDimH);
            Ghist_graph.setColor(Color.BLACK);
            BasicStroke bs = new BasicStroke(1);
            Ghist_graph.setStroke(bs);

            //Baselines
            Ghist_graph.drawLine(4, RPanelDimH-6, 4, 4);
            Ghist_graph.drawLine(4, RPanelDimH-6, RPanelDimW-4, RPanelDimH-6);

            //Histogram lines
            Ghist_graph.setColor(Color.GRAY);
            for (int i = 7; i < 255+8; i++){
                if (GrayBins[i-7] > 0){
                    Ghist_graph.drawLine(i, RPanelDimH-7, i, RPanelDimH-7-GrayBins[i-7]);
                }
            }

            //Setting the icon on its corresponding label
            ImageIcon GrayIcon = new ImageIcon(Ghist_base);
            rLabel.setIcon(GrayIcon);
            RedHistogram.add(rLabel);
            RedHistogram.revalidate();
        }
        else  //If Image is colored (24 bits per pixel), just show a histogram per channel
        {
            //Operations over histograms
            GenHist.setBins(img, "COLOR");
            GenHist.normalizeHistograms("COLOR");
            RedBins = GenHist.getRedHistogram();
            GreenBins = GenHist.getGreenHistogram();
            BlueBins = GenHist.getBlueHistogram();

            //Creating Buffered images for graphics
            BufferedImage Rhist_base = new BufferedImage(RPanelDimW, RPanelDimH, BufferedImage.TYPE_3BYTE_BGR);
            BufferedImage Grhist_base = new BufferedImage(GrPanelDimW, GrPanelDimH, BufferedImage.TYPE_3BYTE_BGR);
            BufferedImage Bhist_base = new BufferedImage(BPanelDimW, BPanelDimH, BufferedImage.TYPE_3BYTE_BGR);

            //Drawing the graphics
            /////////RED
            RojoLabel.setText("Rojo");
            Graphics2D Rhist_graph = Rhist_base.createGraphics();
            Rhist_graph.setBackground(Color.WHITE);
            Rhist_graph.fillRect(0, 0, RPanelDimW, RPanelDimH);
            Rhist_graph.setColor(Color.BLACK);
            BasicStroke bs = new BasicStroke(1);
            Rhist_graph.setStroke(bs);

            //Baselines
            Rhist_graph.drawLine(4, RPanelDimH-6, 4, 4);
            Rhist_graph.drawLine(4, RPanelDimH-6, RPanelDimW-6, RPanelDimH-6);

            //Histogram lines
            Rhist_graph.setColor(Color.RED);
            for (int i = 7; i < 255+8; i++){
                if (RedBins[i-7] > 0){
                    Rhist_graph.drawLine(i, RPanelDimH-7, i, RPanelDimH-7-RedBins[i-7]);
                }
            }

            //Setting the icon on its corresponding label
            ImageIcon RedIcon = new ImageIcon(Rhist_base);
            rLabel.setIcon(RedIcon);
            RedHistogram.add(rLabel);
            RedHistogram.revalidate();

            /////////GREEN
            VerdeLabel.setText("Verde");
            Graphics2D Grhist_graph = Grhist_base.createGraphics();
            Grhist_graph.setBackground(Color.WHITE);
            Grhist_graph.fillRect(0, 0, GrPanelDimW, GrPanelDimH);
            Grhist_graph.setColor(Color.BLACK);
            Grhist_graph.setStroke(bs);

            //Baselines
            Grhist_graph.drawLine(4, GrPanelDimH-6, 4, 4);
            Grhist_graph.drawLine(4, GrPanelDimH-6, GrPanelDimW-6, GrPanelDimH-6);

            //Histogram lines
            Grhist_graph.setColor(Color.GREEN);
            for (int i = 7; i < 255+8; i++){
                if (GreenBins[i-7] > 0){
                    Grhist_graph.drawLine(i, GrPanelDimH-7, i, GrPanelDimH-7-GreenBins[i-7]);
                }
            }

            //Setting the icon on its corresponding label
            ImageIcon GreenIcon = new ImageIcon(Grhist_base);
            grLabel.setIcon(GreenIcon);
            GreenHistogram.add(grLabel);
            GreenHistogram.revalidate();

            /////////BLUE
            AzulLabel.setText("Azul");
            Graphics2D Bhist_graph = Bhist_base.createGraphics();
            Bhist_graph.setBackground(Color.WHITE);
            Bhist_graph.fillRect(0, 0, BPanelDimW, BPanelDimH);
            Bhist_graph.setColor(Color.BLACK);
            Bhist_graph.setStroke(bs);

            //Baselines
            Bhist_graph.drawLine(4, BPanelDimH-6, 4, 4);
            Bhist_graph.drawLine(4, BPanelDimH-6, BPanelDimW-6, BPanelDimH-6);

            //Histogram lines
            Bhist_graph.setColor(Color.BLUE);
            for (int i = 7; i < 255+8; i++){
                if (BlueBins[i-7] > 0){
                    Bhist_graph.drawLine(i, BPanelDimH-7, i, BPanelDimH-7-BlueBins[i-7]);
                }
            }

            //Setting the icon on its corresponding label
            ImageIcon BlueIcon = new ImageIcon(Bhist_base);
            bLabel.setIcon(BlueIcon);
            BlueHistogram.add(bLabel);
            BlueHistogram.revalidate();
        }
    }

    private void refreshImageInformation(String msg){
        getBitsPerPixel();
        drawHistograms(); 
        Estado.setText( msg );
        Colores.setText("Colores únicos: "+colorsCounter);
        Dimensiones.setText("Dimensiones: " + width + "x" + height);
        BPP.setText("Bits por pixel: " + bitspp);
        DPI.setText("Puntos por pulgada (dpi): -"); 
    }
    
    private String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }

        return null;
    }
    
    private int clampColorValue(int val){
        if(val > 255){
            return 255;
        }
        if(val < 0){
            return 0;
        }
        return val;
    }

    private void refreshImageDisplayed(boolean count){
        ImageIcon icon = new ImageIcon(img);
        // Adding the ImageIcon to the Label.
        imglabel.setIcon( icon );
        //Aligning the image to the center.
        imglabel.setHorizontalAlignment(JLabel.CENTER);
        //Adding the label to the Scrolling pane.
        jScrollPane.getViewport().add(imglabel);
        // Repainting the scroll pane to update the changes
        jScrollPane.repaint();

        if(count){
            // Recounting colors
            countUniqueColors();
        }
    }
    
    private void AbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirArchivoActionPerformed
        //FileInputStream in = null;
        //StreamTokenizer parser;
        //BufferedReader reader;
        //In response to a button click, the file chooser is displayed
        int returnVal = fcOpen.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // The image variable
            img = null;
            IplImage image = null;
            File file = fcOpen.getSelectedFile();
            String path = file.getAbsolutePath();
            String extension = path.substring(path.length() - 3);

            if(null != extension){
                // Are we opening a bmp image?
                switch (extension) {
                    case "bmp":
                    case "jpg":
                    case "png":
                    try {
                        // Filling BufferedImage with file information
                        img = ImageIO.read(file);
                        image = cvLoadImage(path);
                        //ColorModel cm =  img.getColorModel();
                        //int color = img.getRGB(0,0);
                        //JOptionPane.showMessageDialog(this, "Modelo de color:\n" +cm+"\nRGB color:\n" + color );
                        // Making note of image properties
                        format = 3;
                        updateDimensions();
                        //JOptionPane.showMessageDialog(this, "Imagen tipo: " + types);
                    } catch (IOException e) {
                        // Report exceptions
                        JOptionPane.showMessageDialog(this, "Error al Abrir Imagen!");
                    }
                    break;
                }
                getBitsPerPixel();
                ilpImage = toIplImage(img);
                if (image != null && bitspp == 1) {
                    img = toBufferedImage(image);
                }

//                ilpImage = toIplImage(img);
//                img = toBufferedImage(ilpImage);

//                img = null;
//                img = toBufferedImage(ilpImage);
//                ColorModel cm =  img.getColorModel();
//                int color = img.getRGB(0,0);
//                JOptionPane.showMessageDialog(this, "Modelo de color:\n" +cm+"\nRGB color:\n" + color );

                refreshImageDisplayed(true);

                // Counting unique colors
                countUniqueColors();
                
                drawHistograms();

                //Changing Estado Label
                Estado.setText("Abriendo " + file.getAbsolutePath() );
                Colores.setText("Colores únicos: "+colorsCounter);
                Dimensiones.setText("Dimensiones: " + width + "x" + height);
                BPP.setText("Bits por pixel: " + bitspp);
                DPI.setText("Puntos por pulgada (dpi): -");

                //Changing Estado Label
                Estado.setText("Abriendo " + file.getAbsolutePath());
            }
        } else {
            // Cancel opening.
            //JOptionPane.showMessageDialog(this, "Opening file canceled.");
            //log.append("Open command cancelled by user." + newline);
        }
    }//GEN-LAST:event_AbrirArchivoActionPerformed

    private void GuardarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarImagenActionPerformed
        int returnVal;
        if ( img != null ){
            returnVal = fcSave.showSaveDialog(this);
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Cargue una imagen primero!");
            return;
        }
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fcSave.getSelectedFile();
                // Getting the image extension.
                String path = file.getAbsolutePath();
                String extension = path.substring(path.length() - 3);
                if ("bmp".equals(extension) || "png".equals(extension) || "jpg".equals(extension)){
                    ImageIO.write(img, extension, new File(fcSave.getSelectedFile().getAbsolutePath()));
                    Estado.setText("Imagen guardada en: " + fcSave.getSelectedFile().getAbsolutePath());
                }
            } catch ( IOException e) {
                JOptionPane.showMessageDialog(this, "¡ERROR: Ocurrio un error al guardar la imagen!");
            }
        }
    }//GEN-LAST:event_GuardarImagenActionPerformed

    private void ReadmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadmeActionPerformed
        Runtime rt = Runtime.getRuntime();
        String readme = ("README.txt");
        try {
            Process p = rt.exec("notepad "+readme);
        } catch (IOException ex) {
            Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ReadmeActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        JOptionPane.showMessageDialog(this, "Editor de Imágenes\nRaquel Escalante y Rafael Vasquez\nSemestre 2-2017\nProcesamiento Digital De Imágenes", "Acerca de", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_AboutActionPerformed

    private void BlancoNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlancoNegroActionPerformed
        if (img != null){
            /** JOptionPane SliderPane = new JOptionPane();
            //Creating a ChangeListener so the changes in the JOptionPane get reflected to the slider.
            thresholdSlider.addChangeListener(createChangeListener( SliderPane ));
            SliderPane.setMessage(new Object[] { "Valor del umbral: ", thresholdSlider });
            SliderPane.setMessageType(JOptionPane.QUESTION_MESSAGE);
            SliderPane.setOptionType(JOptionPane.OK_CANCEL_OPTION);
            JDialog dialog;
            dialog = SliderPane.createDialog(jScrollPane, "Umbral");
            dialog.setVisible(true); */

            Object[] params = {"Valor del umbral: ", thresholdSlider};
            Object[] options = {"Aceptar", "Cancelar"};
            int result = JOptionPane.showOptionDialog(  ScrollPanePanel,
                params,
                "Opciones de Umbralización",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,           // Don't use a custom Icon
                options,        // The strings of buttons
                options[0]);    // Default button title
            //If the operation was canceled do nothing.
            if (result == JOptionPane.NO_OPTION){
                return;
            }
            img = myFilters.ThresholdBlackAndWhite(img, thresholdSlider.getValue());
            refreshImageDisplayed(true);
            format = 1;
            refreshImageInformation("Aplicando Umbralización a Blanco y Negro.");
            //Estado.setText("Aplicando Blanco y Negro | Colores Únicos en imagen: " + colorsCounter);
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Cargue una imagen primero!");
        }
    }//GEN-LAST:event_BlancoNegroActionPerformed

    private void EscalaDeGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EscalaDeGrisesActionPerformed
        if (img != null){
            ColorModel cm = img.getColorModel();
            bitspp = cm.getPixelSize();
            if(bitspp == 24){
                IplImage ilpImage = toIplImage(img);
                IplImage temp = cvCreateImage(cvGetSize(ilpImage), IPL_DEPTH_8U, 1);
                cvCvtColor(ilpImage, temp, CV_RGB2GRAY);
                img = toBufferedImage(temp);
                refreshImageDisplayed(true);
                refreshImageInformation("Aplicando Escala de Grises.");
            }else{
                JOptionPane.showMessageDialog(this, "¡La imágen no puede ser convertida a escala de grises!");
            }
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Cargue una imagen primero!");
        }
    }//GEN-LAST:event_EscalaDeGrisesActionPerformed

    private void DilatacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DilatacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DilatacionActionPerformed

    private void OTSUOpenCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OTSUOpenCVActionPerformed
        if (img != null){
            IplImage ilpImage2 ;
            IplImage ilpImageGray;
            ColorModel cm = img.getColorModel();
            bitspp = cm.getPixelSize();
            switch(bitspp){
                case 24:
                    ilpImage2 = toIplImage(img);
                    ilpImageGray = cvCreateImage(cvGetSize(ilpImage2), IPL_DEPTH_8U, 1);
                    cvCvtColor(ilpImage2, ilpImageGray, CV_RGB2GRAY);
                    cvThreshold(ilpImageGray, ilpImageGray, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);
                    img = toBufferedImage(ilpImageGray);
                    break;
                case 8:
                    ilpImage2 = toIplImage(img);
                    cvThreshold(ilpImage2, ilpImage2, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);
                    img = toBufferedImage(ilpImage2);
                    break;
            }
            
            refreshImageDisplayed(true);
            refreshImageInformation("Aplicando Umbralización de OTSU(OpenCV).");
            
            
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Cargue una imagen primero!");
        }
    }//GEN-LAST:event_OTSUOpenCVActionPerformed

    private void TrianguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrianguloActionPerformed
        if (img != null){
            IplImage ilpImage2;
            IplImage ilpImageGray;
            ColorModel cm = img.getColorModel();
            bitspp = cm.getPixelSize();
            switch(bitspp){
                case 24:
                    ilpImage2 = toIplImage(img);
                    ilpImageGray = cvCreateImage(cvGetSize(ilpImage2), IPL_DEPTH_8U, 1);
                    cvCvtColor(ilpImage2, ilpImageGray, CV_RGB2GRAY);
                    cvThreshold(ilpImageGray, ilpImageGray, 0, 255, CV_THRESH_BINARY | CV_THRESH_TRIANGLE );
                    img = toBufferedImage(ilpImageGray);
                    break;
                case 8:
                    ilpImage2 = toIplImage(img);
                    cvThreshold(ilpImage2, ilpImage2, 0, 255, CV_THRESH_BINARY | CV_THRESH_TRIANGLE );
                    img = toBufferedImage(ilpImage2);
                    break;
            }
            
            refreshImageDisplayed(true);
            refreshImageInformation("Aplicando Umbralización de Triangulo.");
            
            
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Cargue una imagen primero!");
        }
    }//GEN-LAST:event_TrianguloActionPerformed

    private void OTSUPropioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OTSUPropioActionPerformed
        if (img != null){
            IplImage ilpImage2 ;
            IplImage ilpImageGray;
            ColorModel cm = img.getColorModel();
            bitspp = cm.getPixelSize();
            switch(bitspp){
                case 24:
                    ilpImage2 = toIplImage(img);
                    ilpImageGray = cvCreateImage(cvGetSize(ilpImage2), IPL_DEPTH_8U, 1);
                    cvCvtColor(ilpImage2, ilpImageGray, CV_RGB2GRAY);
                    img = toBufferedImage( ilpImageGray );
                    Histogram hist = new Histogram();
                    hist.setBins(img, "GRAY");
                    int[] histValues = hist.getGrayHistogram();
                    int t = OTSUThreshold(histValues, height*width);
                    img = myFilters.ThresholdBlackAndWhite(img, t);
                    break;
                case 8:
                    Histogram hist2 = new Histogram();
                    hist2.setBins(img, "GRAY");
                    //hist.normalizeHistograms("GRAY");
                    int[] histValues2 = hist2.getGrayHistogram();
                    int t2 = OTSUThreshold(histValues2, height*width);
                    img = myFilters.ThresholdBlackAndWhite(img, t2);
                    break;
            }
            
            refreshImageDisplayed(true);
            refreshImageInformation("Aplicando Umbralización de OTSU(Propio).");
            
            
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Cargue una imagen primero!");
        }
    }//GEN-LAST:event_OTSUPropioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainInterface().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem AbrirArchivo;
    private javax.swing.JMenuItem Apertura;
    private javax.swing.JLabel AzulLabel;
    private javax.swing.JLabel BPP;
    private javax.swing.JPanel BarraEstadoPanel;
    private javax.swing.JMenuItem BlancoNegro;
    private javax.swing.JPanel BlueHistogram;
    private javax.swing.JMenuItem Cierre;
    private javax.swing.JMenu ColorMenu;
    private javax.swing.JLabel Colores;
    private javax.swing.JLabel DPI;
    private javax.swing.JMenuItem DeshacerOperacion;
    private javax.swing.JMenuItem Dilatacion;
    private javax.swing.JLabel Dimensiones;
    private javax.swing.JMenuItem Erosion;
    private javax.swing.JMenuItem EscalaDeGrises;
    private javax.swing.JLabel Estado;
    private javax.swing.JPanel GreenHistogram;
    private javax.swing.JMenuItem GuardarImagen;
    private javax.swing.JLabel HistoLabel;
    private javax.swing.JPanel HistoPanel;
    private javax.swing.JPanel ImageInfoPanel;
    private javax.swing.JLabel InfoLabel;
    private javax.swing.JPanel InfoPanel;
    private javax.swing.JMenu MenuAyuda;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuFiltros;
    private javax.swing.JMenu MorfologiaMenu;
    private javax.swing.JMenuItem OTSUOpenCV;
    private javax.swing.JMenuItem OTSUPropio;
    private javax.swing.JMenuItem Readme;
    private javax.swing.JPanel RedHistogram;
    private javax.swing.JMenu ReduccionColorMenu;
    private javax.swing.JMenuItem Rehacer;
    private javax.swing.JMenu RehacerOperacion;
    private javax.swing.JLabel RojoLabel;
    private javax.swing.JPanel ScrollPanePanel;
    private javax.swing.JMenuItem Triangulo;
    private javax.swing.JMenu UmbralizacionMenu;
    private javax.swing.JLabel VerdeLabel;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
